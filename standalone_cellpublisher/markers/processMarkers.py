#!/usr/bin/python
#
#    Copyright (C) 2009 Christoph Lammers, Lope A. Florez
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
processMarkers.py

Contains a function called process_markers that checks the notes of the
markers file generated by the markers.py function and replaces certain
tokens like PubMed and Uniprot ids to links and detailed content.

Usage:

>>> processedMarkers = process_markers("xml_file")

"""

__author__ = 'lflorez@gwdg.de'

import re
from xml.dom.minidom import parseString
from urllib2 import urlopen
import os
from django.utils.encoding import smart_str, smart_unicode

def process_markers(xml, pathToTarget, downloadPDBs=False):
    """
    Replaces the notes of a markers file generated with CellPublisher based
    on tokens like PMID: xxxx.

    """
    pdbTargetFolder = os.path.join(pathToTarget,
                                    "../JSmol/structures/")
    xml_text = xml.toxml()

    # Process instances of pmid (upper- or lowercase) to PubMed links
    xml_text = re.sub(r'(?i)pmid:\s*(\d+)',
	r'PubMed: <a href="http://www.ncbi.nlm.nih.gov/pubmed/\1" target="_blank">\1</a>',
           xml_text)

    # Process instances of uniprot (upper- or lowercase) to links to Uniprot
    xml_text = re.sub(r'(?i)uniprot:\s*([0-9A-Z]+)',
           r'Uniprot: <a href="http://www.uniprot.org/uniprot/\1" target="_blank">\1</a>',
           xml_text)

    # Process instances of pubchem (upper- or lowercase) to links to PubChem
    xml_text = re.sub(r'(?i)pubchem:\s*(\d+)',
           r'<img id="pubChemImage" width="200px" height="200px" src="http://pubchem.ncbi.nlm.nih.gov/image/imgsrv.fcgi?t=l&cid=\1">PubChem: <a href="http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=\1" target="_blank">\1</a>',
           xml_text)
    
   # print xml_text


    if downloadPDBs:
        # Find all instances of pdb and download them
        pdbs = re.findall(r'(?i)pdb:\s*([0-9A-Z]{4})', xml_text)
    
        print pdbs
        for pdb in pdbs:
            download_pdb_file(pdb, pdbTargetFolder)

        # Process instances of pdb (upper- or lowercase) to links to PDB and of the
        # structure (assuming it is already present in the disk)  
        xml_text = re.sub(r'(?i)pdb:\s*([0-9A-Z]{4})',
                r'PDB: <a href="http://www.pdb.org/pdb/explore.do?structureId=\1" target="_blank">\1</a>',
                xml_text)
    else:
        # Process instances of pdb (upper- or lowercase) to links to PDB 
        xml_text = re.sub(r'(?i)pdb:\s*([0-9A-Z]{4})',
                r'PDB: <a href="http://www.pdb.org/pdb/explore.do?structureId=\1" target="_blank">\1</a>',
                xml_text)
     
    return parseString(smart_str(xml_text))

def download_pdb_file(pdb, targetFolder):
    """
    Check if a pdb file is already saved in the targetfolder, otherwise
    download and save it.

    """
    filename = targetFolder + pdb + '.pdb'
    
    try:
        if os.path.exists(filename):
            print "Filename already exists."

        else:
            url = "http://www.rcsb.org/pdb/files/"
            pdb_file = urlopen(url + pdb.lower() + '.pdb')
            output = open(filename, "wb")
            output.write(pdb_file.read())
            output.close()

    except:
        pass
   
